{"ast":null,"code":"class Random {\n  constructor(max = 1000, allowNegative = true) {\n    this.max = max;\n    this.allowNegative = allowNegative;\n  }\n\n  randomInt(min, max) {\n    if (max > this.max) {\n      max = this.max;\n    }\n\n    if (min < 0 && !this.allowNegative) {\n      min = 0;\n    }\n\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n}\n\nclass ColorGenerator extends Random {\n  constructor(max, allowNegatives, type = \"rgb\") {\n    super(max, allowNegatives);\n    this.typeList = ['hex', 'rgb'];\n\n    if (this.typeList.includes(type)) {\n      this.type = type;\n    } else {\n      this.type = \"rgb\";\n    }\n  }\n\n  get types() {\n    return this.typeList;\n  }\n\n  set types(types = ['hex', 'rgb']) {\n    if (Array.isArray(types)) {\n      this.typeList = types.map(type => type);\n    }\n  }\n\n  color() {\n    let r = super.randomInt(0, 255);\n    let g = super.randomInt(0, 255);\n    let b = super.randomInt(0, 255);\n\n    if (this.type === 'hex') {\n      return \"#\".concat(r.toString(16)).concat(g.toString(16)).concat(b.toString(16));\n    } else {\n      return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n    }\n  }\n\n}\n\nexport const rando = new ColorGenerator();\nconst shakespeareApi = \"https://api.graph.cool/simple/v1/shakespeare\";\n\nlet options = () => {\n  return {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: \"{\\n           allPoems(\\n               first: 1\\n               skip: \".concat(rando.randomInt(0, 160), \"\\n           ){\\n               title\\n               author\\n               lines\\n               text\\n           }\\n       }\")\n    })\n  };\n}; // fetch(shakespeareApi, options()).then( response => response.json()).then(json => {\n//     console.log(json)\n// })\n\n\nexport async function getRandomPoem() {\n  try {\n    let result = await fetch(shakespeareApi, options());\n    let response = await result.json();\n    let poem = response.data.allPoems[0];\n    return poem.text;\n  } catch (err) {\n    console.log(\"Error in getRandomPoem: \", err);\n    throw err;\n  }\n}","map":{"version":3,"sources":["/Users/alexstolzoff/Desktop/Projects/es6-editor/src/utils.js"],"names":["Random","constructor","max","allowNegative","randomInt","min","Math","ceil","floor","random","ColorGenerator","allowNegatives","type","typeList","includes","types","Array","isArray","map","color","r","g","b","toString","rando","shakespeareApi","options","method","headers","body","JSON","stringify","query","getRandomPoem","result","fetch","response","json","poem","data","allPoems","text","err","console","log"],"mappings":"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","sourcesContent":["class Random {\n\n    constructor(max = 1000, allowNegative = true) {\n        this.max = max\n        this.allowNegative = allowNegative\n    }\n\n    randomInt(min, max) {\n        if (max > this.max) {\n            max = this.max\n        }\n\n        if (min < 0 && !this.allowNegative) {\n            min = 0\n        }\n        min = Math.ceil(min)\n        max = Math.floor(max)\n        return Math.floor(Math.random() * (max - min + 1)) + min\n    }\n}\n\nclass ColorGenerator extends Random {\n    constructor(max, allowNegatives, type = \"rgb\") {\n        super(max, allowNegatives)\n        if(this.typeList.includes(type)) {\n            this.type = type\n        } else {\n            this.type = \"rgb\"\n        }\n    }\n\n    typeList = ['hex', 'rgb']\n\n    get types() {\n        return this.typeList\n    }\n\n    set types(types = ['hex', 'rgb']) {\n        if(Array.isArray(types)) {\n            this.typeList = types.map(type => type)\n        }\n    }\n\n    color() {\n        let r = super.randomInt(0, 255)\n        let g = super.randomInt(0, 255)\n        let b = super.randomInt(0, 255)\n\n        if(this.type === 'hex') {\n            return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`\n        } else {\n            return `rgb(${r}, ${g}, ${b})`\n        }\n    }\n}\n\nexport const rando = new ColorGenerator()\n\nconst shakespeareApi = \"https://api.graph.cool/simple/v1/shakespeare\"\n\nlet options = () => {\n    return {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            query: `{\n           allPoems(\n               first: 1\n               skip: ${rando.randomInt(0,160)}\n           ){\n               title\n               author\n               lines\n               text\n           }\n       }`\n        })\n    }\n\n\n}\n\n// fetch(shakespeareApi, options()).then( response => response.json()).then(json => {\n//     console.log(json)\n// })\n\nexport async function getRandomPoem() {\n    try {\n        let result = await fetch(shakespeareApi, options())\n        let response = await result.json()\n        let poem = response.data.allPoems[0]\n        return poem.text\n    }\n    catch(err) {\n        console.log(\"Error in getRandomPoem: \", err)\n        throw err\n    }\n}"]},"metadata":{},"sourceType":"module"}