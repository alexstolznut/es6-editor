{"ast":null,"code":"import _objectSpread from \"/Users/alexstolzoff/Desktop/Projects/es6-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/alexstolzoff/Desktop/Projects/es6-editor/src/App.js\";\nimport React, { Component } from 'react';\nimport { Markup, Editor, Container, Column, Row, RuleInput, RuleLabel, StyleInput, Document, Button } from './styled';\nimport hljs from 'highlight.js';\nimport { rando, getRandomPoem } from './utils';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editor: \"\",\n      name0: \"\",\n      begin0: \"\",\n      end0: \"\",\n      style0: \"\",\n      rules: 1\n    };\n\n    this.handleChange = event => {\n      let _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.newFields = () => {\n      this.setState(prevState => {\n        let rules = prevState.rules;\n        let fields = ['name', 'begin', 'end', 'style'];\n        let inputValues = {};\n        fields.forEach(field => {\n          inputValues = _objectSpread({}, inputValues, {\n            [\"\".concat(field).concat(rules)]: ''\n          });\n        });\n        rules++;\n        console.log(_objectSpread({\n          rules\n        }, inputValues));\n        return _objectSpread({\n          rules\n        }, inputValues);\n      });\n    };\n\n    this.convertToMarkup = (text = \"\") => {\n      return {\n        __html: hljs.highlightAuto(text).value\n      };\n    };\n\n    this.language = newRules => {\n      return () => ({\n        contains: [...newRules]\n      });\n    };\n\n    this.registerLanguage = state => {\n      let rules = state.rules;\n      let ruleObjects = [];\n\n      for (let i = 0; i < rules; i = i + 1) {\n        let newRule = {\n          className: state[\"name\".concat(i)],\n          begin: state[\"begin\".concat(i)],\n          end: state[\"end\".concat(i)]\n        };\n        let className = newRule.className,\n            begin = newRule.begin,\n            end = newRule.end;\n        console.log(className.length, begin.length, end.length);\n\n        if (className.length > 0 && begin.length > 0 && end.length > 0) {\n          begin = new RegExp(begin);\n          end = new RegExp(end);\n          ruleObjects.push(newRule);\n          console.log('success');\n        }\n      }\n\n      hljs.registerLanguage('language', this.language(ruleObjects));\n      hljs.configure({\n        languages: ['language']\n      });\n    };\n\n    this.prepareStyles = () => {\n      let rules = this.state.rules;\n      let styles = [];\n\n      for (let i = 0; i < rules; i = i + 1) {\n        styles.push(\"\\n        .hljs-\".concat(this.state['name' + i], \"{\\n          \").concat(this.state['style' + i], \"\\n        }\\n      \"));\n      }\n\n      getRandomText = async function () {\n        console.log('success');\n\n        try {\n          let poem = await getRandomPoem();\n          this.handleChange({\n            target: {\n              name: 'editor',\n              value: poem\n            }\n          });\n          console.log(poem);\n        } catch (err) {\n          console.log(\"getRandomPoem Error: \", err);\n        }\n      };\n\n      let newStyles = \"\".concat(styles).replace(',', \"\");\n      console.log(newStyles);\n      return newStyles;\n    };\n  }\n\n  get rules() {\n    let rules = this.state.rules;\n    let array = [];\n    let fields = ['name', 'begin', 'end'];\n\n    for (let i = 0; i < rules; i = i + 1) {\n      array.push(React.createElement(Row, {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \" \", fields.map((field, index) => {\n        return React.createElement(Column, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(RuleLabel, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \" \", field, \" \"), \" \", React.createElement(RuleInput, {\n          value: this.state[\"\".concat(field).concat(i)],\n          onChange: this.handleChange,\n          name: \"\".concat(field).concat(i),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }), \" \");\n      }), \" \"), \" \", React.createElement(StyleInput, {\n        value: this.state[\"style\".concat(i)],\n        onChange: this.handleChange,\n        name: \"style\".concat(i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), \" \"));\n    }\n\n    return array;\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    this.registerLanguage(nextState);\n    console.log(nextState);\n  }\n\n  render() {\n    let editor = this.state.editor; //object destructuring\n\n    let handleChange = this.handleChange,\n        newFields = this.newFields,\n        rules = this.rules,\n        convertToMarkup = this.convertToMarkup,\n        prepareStyles = this.prepareStyles,\n        getRandomText = this.getRandomText;\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \" \", rules, \" \", React.createElement(Button, {\n      onClick: newFields,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"New Rule \"), \" \"), \" \", React.createElement(Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: getRandomText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Random Text \"), \" \", React.createElement(Document, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      name: \"editor\",\n      value: editor,\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), \" \", React.createElement(Markup, {\n      customStyles: prepareStyles(),\n      dangerouslySetInnerHTML: convertToMarkup(editor),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), \" \"), \" \"), \" \");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alexstolzoff/Desktop/Projects/es6-editor/src/App.js"],"names":["React","Component","Markup","Editor","Container","Column","Row","RuleInput","RuleLabel","StyleInput","Document","Button","hljs","rando","getRandomPoem","App","state","editor","name0","begin0","end0","style0","rules","handleChange","event","target","name","value","setState","newFields","prevState","fields","inputValues","forEach","field","console","log","convertToMarkup","text","__html","highlightAuto","language","newRules","contains","registerLanguage","ruleObjects","i","newRule","className","begin","end","length","RegExp","push","configure","languages","prepareStyles","styles","getRandomText","poem","err","newStyles","concat","replace","array","map","index","componentWillUpdate","nextProps","nextState","render"],"mappings":"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","sourcesContent":["import React, {\n  Component\n} from 'react'\nimport {\n  Markup,\n  Editor,\n  Container,\n  Column,\n  Row,\n  RuleInput,\n  RuleLabel,\n  StyleInput,\n  Document,\n  Button\n} from './styled'\nimport hljs from 'highlight.js'\nimport {\n  rando,\n  getRandomPoem\n} from './utils'\n\n\nclass App extends Component {\n\n  state = {\n    editor: \"\",\n    name0: \"\",\n    begin0: \"\",\n    end0: \"\",\n    style0: \"\",\n    rules: 1\n  }\n\n  handleChange = (event) => {\n    let {\n      name,\n      value\n    } = event.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  get rules() {\n    let {\n      rules\n    } = this.state\n    let array = []\n    let fields = ['name', 'begin', 'end']\n\n    for (let i = 0; i < rules; i = i + 1) {\n\n      array.push( <\n        Row key = {\n          i\n        } >\n        <\n        Column > {\n          fields.map((field, index) => {\n            return ( <\n              Column key = {\n                index\n              } >\n              <\n              RuleLabel > {\n                field\n              } < /RuleLabel> <\n              RuleInput value = {\n                this.state[`${field}${i}`]\n              }\n              onChange = {\n                this.handleChange\n              }\n              name = {\n                `${field}${i}`\n              }\n              /> <\n              /Column>\n            )\n          })\n        } <\n        /Column> <\n        StyleInput value = {\n          this.state[`style${i}`]\n        }\n        onChange = {\n          this.handleChange\n        }\n        name = {\n          `style${i}`\n        }\n        /> <\n        /Row>\n      )\n    }\n    return array\n  }\n\n  newFields = () => {\n    this.setState((prevState) => {\n      let {\n        rules\n      } = prevState\n\n      let fields = ['name', 'begin', 'end', 'style']\n      let inputValues = {}\n      fields.forEach((field) => {\n        inputValues = {\n          ...inputValues,\n          [`${field}${rules}`]: ''\n        }\n      });\n      rules++\n      console.log({\n        rules,\n        ...inputValues\n      })\n      return {\n        rules,\n        ...inputValues\n      }\n    })\n  }\n\n  convertToMarkup = (text = \"\") => {\n    return {\n      __html: hljs.highlightAuto(text).value\n    }\n  }\n\n  language = (newRules) => {\n    return () => ({\n      contains: [\n        ...newRules\n      ]\n    })\n  }\n\n  registerLanguage = (state) => {\n    let {\n      rules\n    } = state\n    let ruleObjects = []\n\n    for (let i = 0; i < rules; i = i + 1) {\n      let newRule = {\n        className: state[`name${i}`],\n        begin: state[`begin${i}`],\n        end: state[`end${i}`]\n      }\n      let {\n        className,\n        begin,\n        end\n      } = newRule\n      console.log(className.length, begin.length, end.length)\n      if (className.length > 0 && begin.length > 0 && end.length > 0) {\n        begin = new RegExp(begin)\n        end = new RegExp(end)\n        ruleObjects.push(newRule)\n        console.log('success')\n      }\n\n    }\n\n    hljs.registerLanguage('language', this.language(ruleObjects))\n    hljs.configure({\n      languages: ['language']\n    })\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    this.registerLanguage(nextState)\n    console.log(nextState)\n  }\n\n  prepareStyles = () => {\n    let {\n      rules\n    } = this.state\n    let styles = []\n    for (let i = 0; i < rules; i = i + 1) {\n      styles.push(`\n        .hljs-${this.state['name' + i]}{\n          ${this.state['style' + i]}\n        }\n      `)\n    }\n    getRandomText = async function(){\n      console.log('success')\n      try {\n        let poem = await getRandomPoem()\n        this.handleChange({\n          target: {\n            name: 'editor',\n            value: poem\n          }\n        })\n        console.log(poem)\n      } catch (err) {\n        console.log(\"getRandomPoem Error: \", err)\n      }\n    }\n\n    let newStyles = \"\".concat(styles).replace(',', \"\")\n    console.log(newStyles)\n    return newStyles\n  }\n\n  render() {\n    let {\n      editor\n    } = this.state\n    //object destructuring\n    let {\n      handleChange,\n      newFields,\n      rules,\n      convertToMarkup,\n      prepareStyles,\n      getRandomText\n    } = this\n    return ( <\n      Container >\n      <\n      Column > {\n        rules\n      } <\n      Button onClick = {\n        newFields\n      } >\n      New Rule <\n      /Button> <\n      /Column> <\n      Column >\n      <\n      Button onClick = {\n        getRandomText\n      } >\n      Random Text <\n      /Button> <\n      Document >\n      <\n      Editor name = {\n        \"editor\"\n      }\n      value = {\n        editor\n      }\n      onChange = {\n        handleChange\n      }\n      /> <\n      Markup customStyles = {\n        prepareStyles()\n      }\n      dangerouslySetInnerHTML = {\n        convertToMarkup(editor)\n      }\n      /> <\n      /Document> <\n      /Column> <\n      /Container>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}